name: 'Preternatural Upload Logs Action'
description: 'Processes and uploads logs from the default derived data path'

inputs:
  zip-name:
    description: 'Name of the final log zip file (without .zip extension)'
    required: false
    default: ''
  show-passed-tests:
    description: 'Whether to show the details of passed tests in the report'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Cleanup previous runs
      shell: bash
      run: |
        rm -rf ./logs
        rm -rf ./xcresult_reports

    - name: Find logs
      continue-on-error: true
      shell: bash
      run: |
        DERIVED_DATA_PATH="$HOME/Library/Developer/Xcode/DerivedData"
        echo "Searching for logs in: $DERIVED_DATA_PATH"
        
        mkdir -p ./logs
        
        # Find and copy xcresult bundles
        find "$DERIVED_DATA_PATH" -name "*.xcresult" -type d -print0 | while IFS= read -r -d '' result; do
          cp -R "$result" "./logs"
          echo "Copied $result to ./logs"
        done
        
        # Check if any logs were found and copied
        if [ -z "$(ls -A ./logs)" ]; then
          echo "No log files found in $DERIVED_DATA_PATH"
          exit 1
        fi
        
        # Create zip archive with dynamic name
        cd ./logs
        if [ -n "${{ inputs.zip-name }}" ]; then
          ZIP_NAME="${{ inputs.zip-name }}.zip"
        else
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          ZIP_NAME="logs-${TIMESTAMP}.zip"
        fi
        zip -q -r "../$ZIP_NAME" ./*
        cd ..
        
        # Set output path for upload step
        echo "ZIP_PATH=$ZIP_NAME" >> $GITHUB_ENV
        # Set artifact name (zip name without extension) for upload step
        echo "ARTIFACT_NAME=${ZIP_NAME%.zip}" >> $GITHUB_ENV
        
        # Clean up Logs and ResultBundle folders in DerivedData
        echo "Cleaning up Logs and ResultBundle folders in DerivedData..."
        find "$DERIVED_DATA_PATH" -type d -name "Logs" -exec rm -rf {} +
        find "$DERIVED_DATA_PATH" -type d -name "ResultBundle" -exec rm -rf {} +
        echo "Cleanup completed"

    - name: Prepare for xcresulttool
      id: prepare-xcresult
      if: ${{ !env.ACT }}
      shell: bash
      run: |
        # Check if any xcresult bundles exist in the logs directory
        if [ -n "$(find ./logs -name "*.xcresult" -type d)" ]; then          
          # Create a directory for the renamed xcresult bundles
          mkdir -p ./xcresult_reports
          
          # Copy and rename xcresult bundles to static names
          COUNT=1
          find ./logs -name "*.xcresult" -type d | while read -r result; do
            cp -R "$result" "./xcresult_reports/${COUNT}.xcresult"
            echo "Copied $result to ./xcresult_reports/${COUNT}.xcresult"
            COUNT=$((COUNT + 1))
          done
        else
          echo "No xcresult bundles found in logs directory"
        fi

    - name: Generate test report
      if: ${{ !env.ACT }}
      uses: slidoapp/xcresulttool@v3.1.0
      with:
        path: |
          ./xcresult_reports/1.xcresult
        show-passed-tests: ${{ inputs.show-passed-tests }}
        upload-bundles: 'never'
        show-code-coverage: false
      continue-on-error: true

    - name: Cleanup xcresult reports
      shell: bash
      run: |
        rm -rf ./xcresult_reports

    - name: Upload logs
      continue-on-error: true
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.ZIP_PATH }}
